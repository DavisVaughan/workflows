% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/env.R
\name{workflows-internals-env}
\alias{workflows-internals-env}
\alias{.add_env}
\alias{.remove_env}
\title{Internal environment functions}
\usage{
.add_env(x, env)

.remove_env(x)
}
\arguments{
\item{x}{A workflow}

\item{env}{The environment to evaluate tidyselect expressions in}
}
\description{
\code{.add_env()} and \code{.remove_env()} are internal workflow functions for
adding the caller environment to a workflow. They are only exported for
usage by the tuning package, \href{https://github.com/tidymodels/tune}{tune},
and the general user should never need to worry about them.
}
\details{
For \code{\link[=add_variables]{add_variables()}}, workflows delays the evaluation of the \code{outcomes} and
\code{predictors} tidyselect expressions until data is available in \code{fit()}.
Rather than capturing quosures, which could result in large environments
being stored in the workflow, \code{add_variables()} instead captures the
expressions. To allow users to still be able to use tidyselect expressions
like \code{all_of(x)}, the expression is eventually evaluated in the caller
environment of the call to \code{fit()}. It is likely the case that \code{x} will
still be in that environment, and this allows workflows to not carry around
quosures. To avoid this altogether, expert users can still use \code{all_of(!!x)}
to inline the vector. This is admittedly not a perfect solution, but is
the best compromise available.

\code{.add_env()} is used to add the caller environment to the workflow before
calling \code{\link[=.fit_pre]{.fit_pre()}} and \code{\link[=.fit_model]{.fit_model()}}. \code{.remove_env()} removes the
caller environment from the workflow after the model has been fit, to
ensure that it is not carried around in the workflow afterwards.
}
\examples{
x <- c("cyl", "disp")

wf <- workflow()

# Only the expression `all_of(x)` is captured here
wf <- add_variables(wf, mpg, all_of(x))

# Add the environment containing `x` before preprocessing
wf <- .add_env(wf, environment())

# Preprocess the workflow data
wf <- .fit_pre(wf, mtcars)

# Remove the environment to ensure it isn't carried around
wf <- .remove_env(wf)

# Check that cyl / disp were found as predictors
wf$pre$mold$predictors
}
\keyword{internal}
