% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit.R
\name{fit-workflow}
\alias{fit-workflow}
\alias{fit.workflow}
\title{Fit a workflow object}
\usage{
\method{fit}{workflow}(object, data, ..., control = control_workflow())
}
\arguments{
\item{object}{A workflow}

\item{data}{A data frame of predictors and outcomes to use when fitting the
workflow}

\item{...}{Not used}

\item{control}{A \code{\link[=control_workflow]{control_workflow()}} object}
}
\value{
The workflow \code{object}, updated with a fit parsnip model in the
\code{object$fit$fit} slot.
}
\description{
Fitting a workflow currently involves two main steps:
\itemize{
\item Preprocessing the data using a formula preprocessor, or by calling
\code{\link[recipes:prep]{recipes::prep()}} on a recipe.
\item Fitting the underlying parsnip model using \code{\link[parsnip:fit.model_spec]{parsnip::fit.model_spec()}}.
}
}
\details{
In the future, there will also be \emph{postprocessing} steps that can be added
after the model has been fit.
}
\examples{
library(parsnip)
library(recipes)
library(magrittr)

model <- linear_reg() \%>\%
  set_engine("lm")

base_wf <- workflow() \%>\%
  add_model(model)

formula_wf <- base_wf \%>\%
  add_formula(mpg ~ cyl + log(disp))

fit(formula_wf, mtcars)

recipe <- recipe(mpg ~ cyl + disp, mtcars) \%>\%
  step_log(disp)

recipe_wf <- base_wf \%>\%
  add_recipe(recipe)

fit(recipe_wf, mtcars)
}
